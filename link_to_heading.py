import sublime_plugin
import sublime
import re
from User.slugify import slugify

# Give a list of headings in the view. When selected,
# pack the clipboard with the link components. Actual
# link form is generated by "paste_wiki_link" as it uses
# the "anchor" file name to generate a relative link.
# kwoodham@gmail.com
# 12 Jan 2015

# 08 Nov 2017 - if the cursor is in a heading line, just
# create a link with that line; otherwise, generate a drop-down
# list of headers in the file to select from.


class LinkToHeadingCommand(sublime_plugin.TextCommand):

    def on_done(self, index):
        if index == -1:
            return

        self.view.run_command("generate_wiki_link",
            {"args": {'text': self.list[index]}})

    def run(self, edit):
        # First see if we are in a header - if so, use it; otherwise
        # generate a list of all links and call the quick panel
        sel = self.view.sel()[0]
        text = self.view.substr(self.view.line(sel))
        if text[0] == "#":
            self.view.run_command("generate_wiki_link",
            {"args": {'text': text}})
        else:
            locations = self.view.find_all('^[\#]+')
            self.list = [self.view.substr(self.view.line(a)) for a in locations]
            self.view.window().show_quick_panel(self.list, self.on_done)


class GenerateWikiLink(sublime_plugin.TextCommand):

    def run(self, edit, args):
        linkName = re.sub('^[\#]+\s', '', args['text'])
        fileName = self.view.file_name()
        if (linkName.rfind('{#') > -1): #Check first for a hard-coded anchor
            a = linkName.rfind('{#')
            b = linkName.rfind('}')
            slugName = linkName[(a+2):b]
            linkName = linkName[:a].strip()
        else:
            slugName = slugify(linkName, '-')
        outStr = linkName + '|' + fileName + '|' + slugName
        # print(linkName)
        # print(slugName)
        # print(outStr)
        sublime.set_clipboard(outStr)
